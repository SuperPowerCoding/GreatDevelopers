import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

	// static String[] words;
	
	static final char BLOCK = '+';
	static final char TO_BE_FILLED = '-';
	static final int VERTICAL = 0;
	static final int HORIZON = 1;
	
	static class Direction
	{
		int x;
		int y;
		int dir;
	}
	
	static String[] result;
	static Stack<String> words = new Stack<>();
	
	static boolean isSolved()
	{
		return words.isEmpty();
	}
	
	static ArrayList<Direction> getDirections(char[][] crossword, String word)
	{
		ArrayList<Direction> dir = new ArrayList();
		boolean horizonDir = true;
		boolean verticalDir = true;
		
		for(int i = 0 ; i < crossword.length - word.length() ; i++)
		{
			for(int j = 0 ; j < crossword[i].length - word.length(); j++)
			{
				for(int k = 0 ; k < word.length() ; k++)
				{
					// check horizon dir
					if(crossword[i][j+k] == BLOCK || crossword[i][j+k] != word.charAt(k))
					{
						horizonDir = false;
					}
					
					// check vertical dir
					if(crossword[i][j+k] == BLOCK || crossword[i][j+k] != word.charAt(k))
					{
						verticalDir = false;
					}
					
				}
						
				if(horizonDir)
				{
					// ÁÂÇ¥ Ãß°¡
	    			Direction d = new Direction();
	    			d.dir = HORIZON;
	    			d.x = j;
	    			d.y = i;
	    			
	    			dir.add(d);
				}
				
				if(verticalDir)
				{
					// ÁÂÇ¥ Ãß°¡
	    			Direction d = new Direction();
	    			d.dir = VERTICAL;
	    			d.x = j;
	    			d.y = i;
	    			
	    			dir.add(d);
				}
			    			
			    		
			}			
		}
		
		return dir;
	}
	
	
	
	
	static void solve(char[][] crossword)
	{
		if(isSolved())
		{
			// save and return;
		}		
		
		String word = words.pop();
		
		ArrayList<Direction> dirs = getDirections(crossword, word);
		
		for(Direction dir : dirs)
		{
			// fill word			
			for(int j = 0 ; j < word.length() ; j++)
			{
				if(dir.dir == HORIZON)
				{
					crossword[dir.y + j][dir.x] = word.charAt(j);
				}
				else
				{
					crossword[dir.y][dir.x + j] = word.charAt(j);
				}
			}
			
			
			
			
		}
		
	}
	
	
	
	// Complete the crosswordPuzzle function below.
    static String[] crosswordPuzzle(char[][] crossword) {    	
    	
		String word = words.pop();
		
		for(int i = 0 ; i < crossword.length ; i++)
		{
    		int length = 0;
    		int s = 0;	    			    		
			
			for(int j = 0 ; j < crossword[i].length ; j++)
    		{
    			if(crossword[i][j] == TO_BE_FILLED)
    			{
    				length++;
    				if(length == 1) s = j;
    			}
    			else
    			{
    				if(length!=0)
    				{
    					e = j;
			    		if(word.length() == length)
			    		{
			    			for(int l = 0 ; l < length ; l++)
			    			{
			    				crossword[i][l+s] = words[k].charAt(l);
			    				crosswordPuzzle(crossword);
			    			}
			    		}
    				}
    				length = 0;
    			}
    		}
		}    		
    	
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        // BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

    	String[] crossword = new String[10];
    	
        for (int i = 0; i < 10; i++) {
            String crosswordItem = scanner.nextLine();
            crossword[i] = crosswordItem;
        }

        String[] temp = scanner.nextLine().split(" ");
        
        for(int i = 0 ; i < temp.length ; i++)
        {
        	words.push(temp[i]);
        }

        String[] result = crosswordPuzzle(crossword);

        for (int i = 0; i < result.length; i++) {
            // bufferedWriter.write(result[i]);
        	System.out.print(result[i]);

            if (i != result.length - 1) {
                // bufferedWriter.write("\n");
            	System.out.println();
            }
        }

        // bufferedWriter.newLine();

        // bufferedWriter.close();

        scanner.close();
    }
}
